2020-04-13

조건문
	app진입
	실행흐름의 컨트롤!
	조건문은 조건식과 실행될 하나의 문장 또는 블럭{}을 사용
	if문이 주로 사용되며,  경우의 수가 많은 겨우 switch 문을 사용할 것을 고려한다.
	모든 shitch문은 if문으로 변경이 가능하지만 , fi문은 swich문으로 변경할 수 없는 경우가 많다.

	if문은 if, if-else, if-else if의 세가지 형태가 있다.


	if 그리고 else
		if(연산식){ 
	}
		else{
	}	

		연산식에 해당하는 부분이 ture 면 실행되는 영역,
		연산식에 해당하는 부분이 flase 면 본 부분이 if나 else 는 지나쳐진다.


		//else if는 이렇게 횔용한다.


		else if(연산식){
 
	}
		else{


연산식을 진짜 똑똑하게 잘 짜서 if문을 최대한 쉽게,짧게 줄여 주는 것이 가장 좋음.





참조변수 연산자 (비교)
	참조변수는 == , != 밖에 하지 못 한다. 그 이유는 참조변수는 주소 값이기 때문에.
	그러나 str.equals("C")을 이용하면 true/false 값으로  결과를 받을 수 있다.


중첩 if문
	if문 안에 또 다른 if문을 중첩해서 넣을 수 있다.
	if문의 중첩횟수에는 거의 제한이 없다.
	+중첩된 if 문의 경우 , 조건식 1과 조건식2를 모두 true로 포함하고 있어야 하므로 (&&논리 연산으로 대체 가능)
	(예를들면 , 양수이면서 짝수의 경우를 조건 했을때.)


	Switch문
	조건식의 계산 결과와 일치하는 case 문으로 이동 후 break문을 만날 때까지 문장들을 수행한다.
	(break문이 없으면 switch문의 끝까지 진행한다)
 	일치하는 case문의 값이 없는 경우 defalut 문으로 출력한다. (default문 생략 가능)
 	case문의 값으로 변수를 사용할 수 없다.
  	(리터럴, 함수만 가능_
	보통 정해진 값. 상수값 -> 스위치 좋음
	1.7버전 이상은 String ''' 문자열 이동가능


순차 접근 , 반복을 위한 for, while 그리고 do~while

	-문장 또는 문장들을 반복해서 수행할 때 사용
	-조건식과 수행할 블럭[] 또는 문장으로 구성
	-반복회수가 중요한 경우에 for문을 그 외에는 while 문을 사용한다.
	-for 문과 while 문은 서로 변경가능하다
	-do -while 문은 while 문의 변형으로 블럭{}이 최소한 한번은 수행될 것을 보장한다.
	-for - 배열 부분에서 많이 사용.

while문	whrjstlr가 수행할 블럭{} 또는 문장으로 구성
	while (condition){


	}

for문	for(초기화, 조건식, 증감식) { 식

	}//조건식이 true 일 때 수행될 문장들을 적는다.
	for안에 들어가는 지역변수와 컴퓨터의 변수는 서로 다르다.
	순서 : 초기화 -> 조건식 -> 식 -> 증감식

break와 continue
	break 감싸고 있는 {} 종료 - 자신이 포함된 하나의 반복문 또는 switch문을 빠져 나온다.
	      주로 if문과 함께 사용해서 특정 조건을 만족하면 반복문을 벗어나게 한다.
	continue 만나면 다시 조건부로 간다.


	



정리합시다
	반복문의 종류
		for while do-while
		각 종류에 대한 선언부, 조건부, 문법 잘 기억하기.
	반복문의 특징
		반복의 조건 , 탈출의 조건
	반복이 필요한 이유
		유사한 작업들을 끊임없이 해야하는데에 대한 필요성.
		*이후에 배열 작업에서는 for문, 컬렉션 작업도 for문. DB는 while.


