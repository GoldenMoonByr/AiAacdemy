2020-05-01
컬렉션 프레임워크

프레임 워크가 의미하는 바는 다음과 같다.
-> 잘 정의된 , 약속된 구조와 골격
여러 구조화된 클래스들이 내부적으로 제공되어짐 


자바의 컬렉션 프레임워크
->인스턴스의 저장과 참조를 위해 잘 정의된, 클래스들의 구조
PhoneBook 같은 경우 PhoneBookManager가 PhoneInfo의 참조주소 인스턴스를 저장하고 참조한다.
그 PhoneBookManager의 기능 중 몇몇의 기능을 내장되어 있는 클래스의 구조 형태로 제공한다.

컬렉션 프레임워크가 제공하는 기능의 영역
-> 자료구조와 알고리즘 (특징적인 기능을 내포하고 그 기능에 맞게 효율적인, 정형화적인 구조가 내장되어있음)


이론적인 특성만(기능)만 알고 있다면, 보다 적절하고 합리적인 활용이 가능하다.

자료구조: 배열, 리스트, 스택, 큐, 트리, 해시 등
알고리즘 : 정렬, 탐색, 최대, 최소 등


Collection<E>
<E>= 제네릭

Set - 순서 x 값의 중복 X

List - 배열 , 줄세우기
	손서, 정복허용

Queue - 스택 ,큐 와 같은 느낌


Map<K,V> 
K = 식별코드(식별코드(참조값)) , V= 참조값(인스턴스) 저장데이터
->하나의 결과를 빠르게 찾아야할떄 유리.

List<E> 인터페이스를 구현하는 대표적인 제네릭 클래스
+> ArrayList<E> , LinkedList<E>


ArrayList
순서대로, 중복허용
선언법 : ArrayList<Integer> list = new ArrayList<Integer>;
저장 add
삭제 remove
참조 get
요소개수 size



LinkedList<E>
선언법 : 
데이터를 삭제, 추가 할 경우 ArrayList보다 더 유리함.
왜냐하면, 데이터에 각 다음 데이터의 주소를 가르키고 있고,
삭제의 경우 가르키는 주소만 수정해주면 되기 때문이다.



Iteratior
Collection<E> 인터페이스에는 Iterator라는 이름의 메소드가 다음의 헝태로 정의
-> Iterator<E> interator()

boolean hasNext() 참조할 다음 번 요소가 존재하면 true를 반환

E next() 다음 번 요소를 반환
void remove() 현재 위치의 요소를 삭제

